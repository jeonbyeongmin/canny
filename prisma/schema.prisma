// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // GPT 설정 필드
  openaiApiKey  String?
  gptModel      String?   @default("gpt-4")
  gptTemperature Float?   @default(0.7)
  gptMaxTokens  Int?      @default(2000)
  gptSystemPrompt String?
  gptConfigured Boolean   @default(false)

  // 사용자 개인 정보
  company       String?
  timezone      String?   @default("Asia/Seoul")
  
  // 알림 설정
  emailNewsletter     Boolean @default(true)
  emailDigest         Boolean @default(false)
  pushNotifications   Boolean @default(true)
  weeklyReport        Boolean @default(true)
  systemUpdates       Boolean @default(true)
  
  // 언어 및 지역 설정
  language      String? @default("ko")
  dateFormat    String? @default("YYYY-MM-DD")
  timeFormat    String? @default("24h")
  
  // 뉴스레터 설정
  newsletterFrequency   String? @default("daily")
  newsletterDeliveryTime String? @default("09:00")
  newsletterMaxArticles Int?    @default(10)
  newsletterIncludeSummary Boolean @default(true)
  newsletterTone        String? @default("Neutral")
  newsletterLength      String? @default("Medium")
  newsletterFormat      String? @default("Classic")

  accounts Account[]
  sessions Session[]
  newsletters Newsletter[]
  sites Site[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Newsletter {
  id        String   @id @default(cuid())
  title     String
  content   String
  topics    String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletters")
}

model Site {
  id          String   @id @default(cuid())
  url         String
  name        String
  category    String
  status      String   @default("active") // "active" | "inactive"
  description String?
  lastCrawled DateTime?
  articlesCount Int    @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sites")
}
